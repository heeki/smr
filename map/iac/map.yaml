AWSTemplateFormatVersion: '2010-09-09'
Description: SMR map layer
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: python3.8
    Timeout: 60
    Tracing: Active
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14'
      # NOTE: referencing ${AWS::AccountId} is causing SAM local issues, need to hard code the account id
      # https://github.com/aws/aws-sam-cli/issues/1736
      # https://github.com/aws/aws-sam-cli/issues/2325
      # - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:xray-python38:2'
      - !Sub 'arn:aws:lambda:${AWS::Region}:546275881527:layer:xray-python38:2'
      - !Ref pPackage
Parameters:
  pMapMemory:
    Type: Number
  pQueueArn:
    Type: String
  pCountersTableArn:
    Type: String
  pPackage:
    Type: String
  pShuffleType:
    Type: String
  pShuffleLSI1:
    Type: String
  pShuffleLSI2:
    Type: String
Resources:
  # S3
  ShuffleBucket:
    Type: AWS::S3::Bucket
  # DynamoDB
  ShuffleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: eid
          AttributeType: S
        - AttributeName: iid
          AttributeType: S
        - AttributeName: pk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: eid
          KeyType: HASH
        - AttributeName: iid
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: !Ref pShuffleLSI1
          KeySchema:
            - AttributeName: eid
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: !Ref pShuffleLSI2
          KeySchema:
            - AttributeName: eid
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
  # Lambda
  FnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-insights
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: xray
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
                Resource: '*'
        - PolicyName: codeguru
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codeguru-profiler:ConfigureAgent
                  - codeguru-profiler:CreateProfilingGroup
                  - codeguru-profiler:PostAgentProfile
                Resource: 'arn:aws:codeguru-profiler:*:*:profilingGroup/*'
        - PolicyName: sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: !Ref pQueueArn
        - PolicyName: dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref pCountersTableArn
                  - !GetAtt ShuffleTable.Arn
                  - !Sub '${ShuffleTable.Arn}/index/${pShuffleLSI1}'
                  - !Sub '${ShuffleTable.Arn}/index/${pShuffleLSI2}'
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:Put*
                Resource:
                  - !Sub '${ShuffleBucket.Arn}/*'
  Fn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: fn.handler
      Role: !GetAtt FnRole.Arn
      Environment:
        Variables:
          COUNTERS_TABLE: !Select [1, !Split ["/", !Ref pCountersTableArn]]
          SHUFFLE_TABLE: !Ref ShuffleTable
          SHUFFLE_LSI1: !Ref pShuffleLSI1
          SHUFFLE_LSI2: !Ref pShuffleLSI2
          SHUFFLE_BUCKET: !Ref ShuffleBucket
          SHUFFLE_TYPE: !Ref pShuffleType
      MemorySize: !Ref pMapMemory
  FnLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Fn}'
      RetentionInDays: 7
  FnMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !Ref pQueueArn
      FunctionName: !GetAtt Fn.Arn
Outputs:
  outFn:
    Value: !Ref Fn
  outShuffleBucket:
    Value: !Ref ShuffleBucket
  outShuffleTable:
    Value: !Ref ShuffleTable
