AWSTemplateFormatVersion: '2010-09-09'
Description: SMR ingestion layer
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: python3.8
    MemorySize: 128
    Timeout: 60
    Tracing: Active
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14'
Parameters:
  pBucket:
    Type: String
  pBatchSize:
    Type: String
  pLimit:
    Type: String
  pPackage:
    Type: String
Resources:
  # DynamoDB
  Counters:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  # SQS
  IngestQ:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: true
      DeduplicationScope: queue
      DelaySeconds: 0
      FifoQueue: true
      FifoThroughputLimit: perQueue
      MessageRetentionPeriod: 600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DLQ.Arn
        maxReceiveCount: 2
      VisibilityTimeout: 60
  DLQ:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: true
      DeduplicationScope: queue
      DelaySeconds: 0
      FifoQueue: true
      FifoThroughputLimit: perQueue
      MessageRetentionPeriod: 300
      VisibilityTimeout: 60
  # Lambda
  FnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${pBucket}/*'
        - PolicyName: dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt Counters.Arn
        - PolicyName: sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource: !GetAtt IngestQ.Arn
  Fn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: fn.handler
      Role: !GetAtt FnRole.Arn
      Environment:
        Variables:
          TABLE_COUNTERS: !Ref Counters
          QUEUE: !Ref IngestQ
          BATCHSIZE: !Ref pBatchSize
          LIMIT: !Ref pLimit
      Layers:
        - !Ref pPackage
      MemorySize: 1024
  FnLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Fn}'
      RetentionInDays: 7
Outputs:
  outCounters:
    Value: !Ref Counters
  outCountersArn:
    Value: !GetAtt Counters.Arn
  outIngestQ:
    Value: !Ref IngestQ
  outIngestQArn:
    Value: !GetAtt IngestQ.Arn
  outDLQ:
    Value: !Ref DLQ
  outFn:
    Value: !Ref Fn